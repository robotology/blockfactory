%% File    : BlockFactory.tlc
%% Abstract: Inlined tlc file for S-function BlockFactory.cpp
%%

%implements "BlockFactory" "C"

%% Function: NotifyErrors
%% ======================
%%
%% Abstract: Utility for copying the code used for forwarding
%%           errors to the model driver.
%%

%function NotifyErrors(prefix) Output

    std::string error = blockfactory::core::Log::getSingleton().getErrors();
    error = "%<prefix>" + error;

    // Trim the message if needed
    if (error.length() >= 1024) {
        error = error.substr(0, 1024-1);
    }

    // This shouldn't happen
    if (getRTM()->errorStatus) {
        delete getRTM()->errorStatus;
        getRTM()->errorStatus = nullptr;
    }

    getRTM()->errorStatus = new char[1024];
    sprintf(const_cast<char_T*>(getRTM()->errorStatus), "%s", error.c_str());
    return;
    %return
%endfunction %% NotifyErrors

%% Function: GetFactoryForBlockType
%% ================================
%%
%% Abstract: Utility for getting the factory object for the current block type
%%

%function GetFactoryForBlockType(libName, className, logPrefix) Output
    // Get the block factory
    auto factory = blockfactory::core::ClassFactorySingleton::getInstance().getClassFactory(
        {"%<libName>", "%<className>"});

    if (!factory) {
        bfError << "Failed to get factory object (className=" << "%<className>"
                << ",libName=" << "%<libName>" << ")";
        %assign dummy = NotifyErrors(logPrefix)
    }

    if (!factory->isValid()) {
        bfError << "Factory error (" << static_cast<std::uint32_t>(factory->getStatus())
                << "): " << factory->getError().c_str();
        %assign dummy = NotifyErrors(logPrefix)
    }
    %return
%endfunction %% GetFactoryForBlockType


%% Function: Outputs
%% =================

%function Outputs(block, system) Output

  %%assign identifier = Identifier

  %% Save the PWork vector locations in TLC variables
  %assign PWorkStorage_Block     = LibBlockPWork(blockPWork, "", "", 0)
  %assign PWorkStorage_BlockInfo = LibBlockPWork(blockPWork, "", "", 1)

  {
    // Get the CoderBlockInformation from the PWork
    blockfactory::coder::CoderBlockInformation* blockInfo = nullptr;
    blockInfo = static_cast<blockfactory::coder::CoderBlockInformation*>(%<PWorkStorage_BlockInfo>);

    // Get the Block from the PWork
    blockfactory::core::Block* blockPtr = nullptr;
    blockPtr = static_cast<blockfactory::core::Block*>(%<PWorkStorage_Block>);

    // Calculate the output
    // --------------------
    bool ok;
    ok = blockPtr->output(blockInfo);

    // Report errors
    if (!ok) {
        %assign variable = "[Output]"
        %assign dummy = NotifyErrors(variable)
    }
  }
  // End of %<Type> Block: %<Name>
%endfunction %% Outputs

%% Function: BlockTypeSetup
%% ========================

%function BlockTypeSetup(block, system) void
  
  %<LibAddToCommonIncludes("<cstdio>")>
  %<LibAddToCommonIncludes("<BlockFactory/Core/Block.h>")>
  %<LibAddToCommonIncludes("<BlockFactory/Core/Log.h>")>
  %<LibAddToCommonIncludes("<BlockFactory/Core/Parameter.h>")>
  %<LibAddToCommonIncludes("<BlockFactory/Core/Parameters.h>")>
  %<LibAddToCommonIncludes("<BlockFactory/Core/FactorySingleton.h>")>
  %<LibAddToCommonIncludes("<BlockFactory/SimulinkCoder/CoderBlockInformation.h>")>

%endfunction

%% Function: BlockInstanceSetup
%% ============================

%%function BlockInstanceSetup(block, system) void
%%endfunction

%% Function: Start
%% ===============

%function Start(block, system) Output
    
  %% Save the PWork vector locations in TLC variables
  %assign PWorkStorage_Block     = LibBlockPWork(blockPWork, "", "", 0)
  %assign PWorkStorage_BlockInfo = LibBlockPWork(blockPWork, "", "", 1)

  {
    // Create and store the CoderBlockInformation object
    blockfactory::coder::CoderBlockInformation* blockInfo = new blockfactory::coder::CoderBlockInformation();
    %<PWorkStorage_BlockInfo> = static_cast<void*>(blockInfo);

    // Initialize the parameters
    // -------------------------

    blockfactory::core::Parameters params;

    %assign numberOfParameters = SFcnParamSettings[0].numberOfParameters
    %assign className = SFcnParamSettings[0].className
    %assign libName = SFcnParamSettings[0].libName
    %assign blockUniqueName = SFcnParamSettings[0].blockUniqueName

    %foreach i = numberOfParameters

    %assign i = i + 1
    %assign index = SFcnParamSettings[i].index
    %assign name = SFcnParamSettings[i].name
    %assign rows = SFcnParamSettings[i].rows
    %assign cols = SFcnParamSettings[i].cols
    %assign type = SFcnParamSettings[i].type
    %assign storage = SFcnParamSettings[i].storage

    %if SFcnParamSettings[i].isScalar == 1.0
    %assign valueScalar = SFcnParamSettings[i].valueScalar
    %if storage != "std::string"
    params.storeParameter<%<storage>>(%<valueScalar>,
    %else
    params.storeParameter<%<storage>>("%<valueScalar>",
    %endif
      blockfactory::core::ParameterMetadata(blockfactory::core::%<type>, %<index>, %<rows>, %<cols>, "%<name>"));
    %else
    %assign valueVector = SFcnParamSettings[i].valueVector
    {
      std::vector<%<storage>> valueVector;
      %if cols > 0
      valueVector.reserve(%<cols>);
      %endif
      %foreach element = cols
      %if storage != "std::string"
      valueVector.push_back(%<valueVector[element]>);
      %else
      valueVector.push_back("%<valueVector[element]>");
      %endif
      %endforeach
      params.storeParameter<%<storage>>(valueVector,
        blockfactory::core::ParameterMetadata(blockfactory::core::%<type>, %<index>, %<rows>, %<cols>, "%<name>"));
    }
    %endif
    %endforeach

    // Store the block name
    blockInfo->setUniqueBlockName("%<blockUniqueName>");

    // Store the parameters in the CoderBlockInformation object
    blockInfo->storeRTWParameters(params);
    
    // Initialize input / output Signals
    // ---------------------------------
    
    %assign numInputPorts = LibBlockNumInputPorts(block)
    %assign numOutputPorts = LibBlockNumOutputPorts(block)

    // Inputs
    %foreach i = numInputPorts

    %assign dims = LibBlockInputSignalDimensions(i)
    %assign numDims = LibBlockInputSignalNumDimensions(i)
    %if numDims == 1
        %assign rows = 1
        %assign cols = dims[0]
    %else
        %assign rows = dims[0]
        %assign cols = dims[1]
    %endif
    %%assign width = LibBlockInputSignalWidth(i)
    %assign address = LibBlockInputSignalAddr(i, "", "", 0)
    // The const_cast is a workaround to solve https://github.com/robotology/blockfactory/issues/81
    blockInfo->setInputPort(
        {%<i>, {%<rows>, %<cols>}, blockfactory::core::Port::DataType::DOUBLE},
        const_cast<void*>(static_cast<const void*>(%<address>)));
    %endforeach

    // Outputs
    %foreach i = numOutputPorts

    %assign dims = LibBlockOutputSignalDimensions(i)
    %assign numDims = LibBlockOutputSignalNumDimensions(i)
    %if numDims == 1
        %assign rows = 1
        %assign cols = dims[0]
    %else
        %assign rows = dims[0]
        %assign cols = dims[1]
    %endif
    %%assign width = LibBlockOutputSignalWidth(i)
    %assign address = LibBlockOutputSignalAddr(i, "", "", 0)
    blockInfo->setOutputPort(
        {%<i>, {%<rows>, %<cols>}, blockfactory::core::Port::DataType::DOUBLE},
        static_cast<void*>(%<address>));
    %endforeach

    // Initialize the class
    // --------------------

    %assign dummy = GetFactoryForBlockType(libName, className, "[Initialize]")

    // Run a dummy configureSizeAndPorts step. This is currently required for properly
    // handling optional input / outputs static variables.
    // TODO: find a better way to handle them.
    {
        // Create a new class. This object will be destroyed at the end of the scope.
        sharedlibpp::SharedLibraryClass<blockfactory::core::Block> blockPtr(*factory);

        auto tmpCoderBlockInfo = std::unique_ptr<blockfactory::coder::CoderBlockInformation>(
            new blockfactory::coder::CoderBlockInformation);
        tmpCoderBlockInfo->storeRTWParameters(params);
        blockPtr->configureSizeAndPorts(tmpCoderBlockInfo.get());
    }

    // Allocate the block
    blockfactory::core::Block* blockPtr = factory->create();
    factory->addRef();

    // Initialize the block
    bool ok = blockPtr->initialize(blockInfo);

    // Report errors
    if (!ok) {
        %assign variable = "[Initialize]"
        %assign dummy = NotifyErrors(variable)
    }

    // Call the initializeInitialConditions() method
    ok = blockPtr->initializeInitialConditions(blockInfo);

    // Report errors
    if (!ok) {
        %assign variable = "[InitializeInitialConditions]"
        %assign dummy = NotifyErrors(variable)
    }

    // Store the block in the PWork vector
    %<PWorkStorage_Block> = static_cast<void*>(blockPtr);
  }
  // End of %<Type> Block: %<Name>

%endfunction %% Start

%% Function: Terminate
%% ===================

%function Terminate(block, system) Output

  %% Save the PWork vector locations in TLC variables
  %assign PWorkStorage_Block     = LibBlockPWork(blockPWork, "", "", 0)
  %assign PWorkStorage_BlockInfo = LibBlockPWork(blockPWork, "", "", 1)

  %assign numberOfParameters = SFcnParamSettings[0].numberOfParameters
  %assign className = SFcnParamSettings[0].className
  %assign libName = SFcnParamSettings[0].libName

  {
    // Get the CoderBlockInformation from the PWork
    blockfactory::coder::CoderBlockInformation* blockInfo = nullptr;
    blockInfo = static_cast<blockfactory::coder::CoderBlockInformation*>(%<PWorkStorage_BlockInfo>);

    // Get the Block from the PWork
    blockfactory::core::Block* blockPtr = nullptr;
    blockPtr = static_cast<blockfactory::core::Block*>(%<PWorkStorage_Block>);

    %assign dummy = GetFactoryForBlockType(libName, className, "[Initialize]")

    // Terminate the class
    // -------------------
    bool ok;
    ok = blockPtr->terminate(blockInfo);

    // Destroy the block
    factory->destroy(blockPtr);
    blockPtr = nullptr;

    // Decrease the counter of the factory
    factory->removeRef();

    if (factory->getReferenceCount() == 1) {
        // Delete the memory ownership of the shared pointer used in this function
        factory.reset();
        // Delete the factory object
        if (!blockfactory::core::ClassFactorySingleton::getInstance().destroyFactory(
            {"%<libName>", "%<className>"})) {
            bfError << "Failed to destroy the factory";
            // Do not return since other actions need to be performed
        }
    }

    // Delete the BlockInformation object
    delete blockInfo;
    blockInfo = nullptr;

    // Report errors
    if (!ok) {
        %assign variable = "[Terminate]"
        %assign dummy = NotifyErrors(variable)
    }
  }
  // End of %<Type> Block: %<Name>

%endfunction %% Terminate
