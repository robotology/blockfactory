# Copyright (C) 2019 Istituto Italiano di Tecnologia (IIT). All rights reserved.
# This software may be modified and distributed under the terms of the
# GNU Lesser General Public License v2.1 or any later version.

set(NAME "BlockFactory")

foreach(comp (Core Simulink SimulinkCoder))
    if(${${NAME}${comp}_FOUND})
        string(CONCAT FOUND_COMPONENTS_LIST ${FOUND_COMPONENTS_LIST} " ${comp}")
    endif()
endforeach()

# Here comp is only Core, Simulink, SimulinkCoder.
# The call to find_dependency sets the variable BlockFactoryCore_FOUND.
foreach(comp ${${NAME}_FIND_COMPONENTS})
    # Match the component status with the find_dependency exit variable
    set(${NAME}_${comp}_FOUND ${${NAME}${comp}_FOUND})
endforeach()

# Set BlockFactory_FOUND to true and then check if there are required
# components that are missing
set(${NAME}_FOUND TRUE)
check_required_components(${NAME})

if(${${NAME}_FOUND})
    message(STATUS "Found BlockFactory ${${NAME}_VERSION} (Components:${FOUND_COMPONENTS_LIST})")
endif()

# Print useful info about the outcome
if(NOT ${NAME}_FIND_QUIETLY)
    foreach(comp ${${NAME}_FIND_COMPONENTS})
        # If a component is not found, tell the user its name
        if((NOT ${NAME}_FIND_REQUIRED_${comp}) AND (NOT ${NAME}${comp}_FOUND))
            # status if it is OPTIONAL_COMPONENT
            message(STATUS "BlockFactory: OPTIONAL component ${comp} NOT found")
        elseif(NOT ${NAME}${comp}_FOUND)
            # warning if it is REQUIRED
            message(WARNING "BlockFactory: REQUIRED component ${comp} NOT found")
            # Note: find_package will exit with a fatal error but without telling
            #       what is missing
        endif()
    endforeach()
endif()

unset(NAME)
unset(FOUND_COMPONENTS_LIST)
