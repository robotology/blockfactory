# Copyright (C) 2019 Istituto Italiano di Tecnologia (IIT). All rights reserved.
# This software may be modified and distributed under the terms of the
# GNU Lesser General Public License v2.1 or any later version.

include(CMakeParseArguments)

macro(target_from_generated_code)

# ==================================
# PARSE AND PROCESS MACRO PARAMETERS
# ==================================

set(_oneValueArgs MODELNAME SOURCE_FOLDER)
set(PREFIX "tfgc")
string(TOUPPER ${PREFIX} PREFIX)

cmake_parse_arguments(${PREFIX}
    "${_options}"
    "${_oneValueArgs}"
    "${_multiValueArgs}"
    "${ARGN}")

# Check if the MODELNAME has been passed
set(SIMULINK_MODELNAME ${${PREFIX}_MODELNAME})
if(NOT DEFINED ${PREFIX}_MODELNAME OR ${PREFIX}_MODELNAME STREQUAL "")
    message(FATAL_ERROR "Model name not passed or empty")
endif()

# If source folder argument was passed, assume to find here ${SIMULINK_MODELNAME}.cpp file
if(NOT DEFINED ${PREFIX}_SOURCE_FOLDER)
    get_filename_component(CPP_ABSPATH ${SIMULINK_MODELNAME}.cpp ABSOLUTE)
    if(NOT EXISTS ${CPP_ABSPATH})
        message(FATAL_ERROR "Failed to find ${SIMULINK_MODELNAME}.cpp. Use SOURCE_FOLDER argument \
        if it is not contained in the current directory.")
    endif()
    set(AUTOGEN_ABSPATH ${CMAKE_CURRENT_SOURCE_DIR})
else()
    get_filename_component(AUTOGEN_ABSPATH ${${PREFIX}_SOURCE_FOLDER} ABSOLUTE)
    # Check that the directory exists
    if(NOT EXISTS ${AUTOGEN_ABSPATH})
       message(FATAL_ERROR "Passed source directory ${${PREFIX}_SOURCE_FOLDER} does not exist.")
    endif()
    # Look for the cpp file
    if(NOT EXISTS ${AUTOGEN_ABSPATH}/${SIMULINK_MODELNAME}.cpp)
        message(FATAL_ERROR "Failed to find ${SIMULINK_MODELNAME}.cpp in ${${PREFIX}_SOURCE_FOLDER} directory.")
    endif()
endif()

# =====================================================
# FIND DEPENDENCIES FOR BUILDING THE AUTOGENERATED CODE
# =====================================================

find_package(BlockFactory COMPONENTS Core SimulinkCoder REQUIRED)

# ==============================================
# FIND THE defines.txt FILE AND LOAD ITS CONTENT
# ==============================================

# The folder containing the autogenerated sources should contain a defines.txt file
get_filename_component(CODER_DEFINES_FILE ${AUTOGEN_ABSPATH}/defines.txt ABSOLUTE)
if(EXISTS ${CODER_DEFINES_FILE})
    message(STATUS "Found autogenerated sources for ${SIMULINK_MODELNAME} model.")
else()
    message(FATAL_ERROR "Folder ${AUTOGEN_ABSPATH} does not contain defines.txt. It does not look \
    a valid folder containing autogenerated sources.")
endif()

# Parse the defines exported by Simulink Coder
file(STRINGS ${CODER_DEFINES_FILE} CODER_DEFINES)

# ======================
# CREATE SUPPORT TARGETS
# ======================

# This target carries the compile definitions generated by Simulink Coder
# and the include directory for all the non-system headers
add_library(${SIMULINK_MODELNAME}_data INTERFACE)
target_compile_definitions(${SIMULINK_MODELNAME}_data INTERFACE ${CODER_DEFINES})
target_include_directories(${SIMULINK_MODELNAME}_data INTERFACE ${AUTOGEN_ABSPATH})

# This utitily creates a target SimulinkCoder with the right system include directories
include(SimulinkCoderSetup)

# ==============
# LIBRARY TARGET
# ==============

# Library of the autogenerated class
add_library(${SIMULINK_MODELNAME} STATIC
    "${AUTOGEN_ABSPATH}/${SIMULINK_MODELNAME}.h"
    "${AUTOGEN_ABSPATH}/${SIMULINK_MODELNAME}.cpp")

target_link_libraries(${SIMULINK_MODELNAME} PUBLIC
    SimulinkCoder
    ${SIMULINK_MODELNAME}_data
    BlockFactory::SimulinkCoder)

endmacro()
